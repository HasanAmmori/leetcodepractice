import java.util.TreeMap;
import java.util.Map;

class Solution {
        
    class CacheKey implements Comparable<CacheKey>{
        double base;
        int power;

        public CacheKey(double base, int power) {
            this.base = base;
            this.power = power;
        }

        @Override
        public boolean equals(Object obj) {
            CacheKey o = (CacheKey) obj;
            return (this.base == o.base && this.power == o.power);
        }

        @Override
        public int compareTo(CacheKey o) {
            if (this.base == o.base){
                if (this.power == o.power) {
                    return 0;
                }
                return this.power - o.power; 
            }
            return (int)(this.base - o.base);
        }
    }
    
    Map<CacheKey, Double> cache = new TreeMap<>();
    public double myPow(double x, int n) {
        if (x == 1 || x == 0) return x;
        if (x == -1) return n % 2 == 0 ? 1 : -1;
        if (n == 1) return x;
        if (n == 2) return x*x;
        if (n == 0) return 1;
        CacheKey cacheKey = new CacheKey(x, n);
        if (cache.containsKey(cacheKey)) return cache.get(cacheKey);
        double result = 1;
        if (n % 2 == 0) {
            int i = 0;
            while ( n % 2 == 0){
                i++;
                n >>= 1;
            }
            double root = myPow(x, n);
            for (int j = 0; j < i; j++) {
                root *= root;
            }
            result = root;
            cacheKey.power = n;
        } else {
            if (n < 0){
                for (int i = n; i < 0 && result != 0; i++) {
                    result /= x;
                }
            } else {
                for (int i = 0; i < n && result != 0; i++) {
                    result *= x;
                }
            }
        }
        cache.put(cacheKey, result);
        return result;
    }
}
