    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> solutions = new TreeSet<>((l1,l2) -> l1.containsAll(l2) ? 0 : 1);
        for (int i = 0; i < nums.length-2; i++) {
            for (int j = i+1; j < nums.length-1; j++) {
                for (int k = j+1; k < nums.length; k++) {
                    if (nums[i]+nums[j]+nums[k] == 0){
                        solutions.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    }
                }
            }
        }
        return new ArrayList(solutions);
    }
    
    public List<List<Integer>> threeSum(int[] nums) {
        Map<Set<Integer>,List<Integer>> solutions = new HashMap<>();
        for (int i = 0; i < nums.length - 2; i++) {
            for (int j = i + 1; j < nums.length - 1; j++) {
                for (int k = j + 1; k < nums.length; k++) {
                    if (nums[i] + nums[j] + nums[k] == 0) {
                        solutions.put(new HashSet<>(Arrays.asList(nums[i], nums[j], nums[k])), Arrays.asList(nums[i], nums[j], nums[k]));
                    }
                }
            }
        }
        return new ArrayList<>(solutions.values());
    }
